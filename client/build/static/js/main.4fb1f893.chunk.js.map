{"version":3,"sources":["containers/Scrape/Scrape.js","hooks/useChimpArchive.js","App.js","index.js"],"names":["Scrape","onFormSubmit","useState","archiveURL","setArchiveUrl","scrapeArchive","e","preventDefault","console","log","scrapeForm","TextField","variant","onChange","target","value","sx","width","label","Button","onClick","useChimpArchive","archive","setArchive","scrape","url","a","axios","get","response","$","cheerio","load","data","results","each","i","element","date","text","split","children","attr","headline","dataToAdd","replace","trim","push","App","length","ReactDOM","render","document","querySelector"],"mappings":"kKAoCeA,EAhCA,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAChB,EAAkCC,mBAAS,IAA3C,mBAAKC,EAAL,KAAiBC,EAAjB,KAEMC,EAAgB,SAACC,GACrBA,EAAEC,iBACFC,QAAQC,IAAI,qBAAsBN,GAElCF,EAAaE,IAGTO,EACJ,qCACE,wFACA,cAACC,EAAA,EAAD,CACEC,QAAQ,WACRC,SAAU,SAACP,GAAD,OAAOF,EAAcE,EAAEQ,OAAOC,QACxCA,MAAOZ,EACPa,GAAI,CAAEC,MAAO,KACbC,MAAM,mCAER,cAACC,EAAA,EAAD,CACEP,QAAQ,YACRQ,QAAS,SAACd,EAAGH,GAAJ,OAAmBE,EAAcC,IAF5C,uBASJ,OAAO,mCAAGI,K,8DCgBGW,EA5CS,WACtB,MAA8BnB,mBAAS,IAAvC,mBAAOoB,EAAP,KAAgBC,EAAhB,KAEMC,EAAM,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,sEACUC,IAAMC,IAAN,gBAA2B,CAAEH,IAAKA,IAD5C,OACPI,EADO,OAGTC,EAAIC,IAAQC,KAAKH,EAASI,MAE1BC,EAAU,GAEdJ,EAAE,eAAeK,MAAK,SAACC,EAAGC,GAGxB,IAAIC,EAAOR,EAAEO,GAASE,OAAOC,MAAM,OAAO,GAEtCf,EAAMK,EAAEO,GAASI,WAAWC,KAAK,QAEjCC,EAAWb,EAAEO,GAASI,WAAWC,KAAK,SAG1C,GAAIC,GAAYL,GAAQb,EAAK,CAG3B,IAGImB,EAAY,CACdD,SAJaA,EAASE,QAAQ,wBAAyB,KAAKC,OAK5DR,KAAMA,EACNb,IAAKA,GAIPS,EAAQa,KAAKH,GAGfrB,EAAWW,MAjCA,2CAAH,sDAsCZ,MAAO,CAACZ,EAASE,ICzBJwB,EAfH,WAEV,MAAwB3B,EAAgB,IAAxC,mBAAKC,EAAL,KAAcE,EAAd,KAIA,OAFAhB,QAAQC,IAAI,YAAaa,GAGvB,qCACE,sCACCA,EAAQ2B,OAAS,4CAAuB,cAAC,EAAD,CAAQhD,aAAcuB,QCXrE0B,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,cAAc,Y","file":"static/js/main.4fb1f893.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport TextField from \"@mui/material/TextField\";\nimport Button from \"@mui/material/Button\";\n\nconst Scrape = ({ onFormSubmit }) => {\n  let [archiveURL, setArchiveUrl] = useState(\"\");\n\n  const scrapeArchive = (e) => {\n    e.preventDefault();\n    console.log(\"Scrape initiated! \", archiveURL);\n\n    onFormSubmit(archiveURL);\n  };\n\n  const scrapeForm = (\n    <>\n      <div>Enter a MailChimp Campaign Archive URL to source from</div>\n      <TextField\n        variant=\"standard\"\n        onChange={(e) => setArchiveUrl(e.target.value)}\n        value={archiveURL}\n        sx={{ width: 400 }}\n        label=\"MailChimp Campaign Archive URL\"\n      />\n      <Button\n        variant=\"contained\"\n        onClick={(e, archiveURL) => scrapeArchive(e, archiveURL)}\n      >\n        Scrape\n      </Button>\n    </>\n  );\n\n  return <>{scrapeForm}</>;\n};\n\nexport default Scrape;\n","import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport cheerio from \"cheerio\";\n// import cheerioMailchimp from \"../apis/cheerioMailchimp\";\n\nconst useChimpArchive = () => {\n  const [archive, setArchive] = useState([]);\n\n  const scrape = async (url) => {\n    const response = await axios.get(`/chimpScrape/`, { url: url });\n\n    let $ = cheerio.load(response.data);\n\n    let results = [];\n\n    $(\"li.campaign\").each((i, element) => {\n      // Grab the date, headline and URL of each campaign\n\n      let date = $(element).text().split(\" - \")[0];\n\n      let url = $(element).children().attr(\"href\");\n\n      let headline = $(element).children().attr(\"title\");\n\n      // So long as our headline and url aren't empty or undefined, do the following\n      if (headline && date && url) {\n        // This section uses regular expressions and the trim function to tidy our headlines and summaries\n        // We're removing extra lines, extra spacing, extra tabs, etc.. to increase to typographical cleanliness.\n        var headNeat = headline.replace(/(\\r\\n|\\n|\\r|\\t|\\s+)/gm, \" \").trim();\n\n        // Initialize an object we will push to the articles array\n        var dataToAdd = {\n          headline: headNeat,\n          date: date,\n          url: url,\n        };\n\n        // Push new article into articles array\n        results.push(dataToAdd);\n      }\n      // console.log(\"RESULTS: \", results)\n      setArchive(results);\n      // console.log(\"ARCHIVE: \", archive)\n    });\n  };\n\n  return [archive, scrape];\n};\n\nexport default useChimpArchive;\n","import React, { useState } from \"react\";\nimport Scrape from \"./containers/Scrape/Scrape\";\n// import axios from \"axios\";\n// import cheerio from \"cheerio\";\nimport useChimpArchive from \"./hooks/useChimpArchive\";\n\nconst App = () => {\n  // let [archive, setArchive] = useState([]);\n  let [archive, scrape] = useChimpArchive([])\n\n  console.log(\"Archive: \", archive);\n\n  return (\n    <>\n      <div>App</div>\n      {archive.length ? <div>SOMETHING</div> : <Scrape onFormSubmit={scrape} />}\n      \n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}